%% importing dataset
%csv = readtable('C:\Users\FURKAN\Desktop\MAtlab makine öğrenmesi çalışma\data.csv');
%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\FURKAN\Desktop\MAtlab makine öğrenmesi çalışma\data.csv
%
% Auto-generated by MATLAB on 17-Dec-2022 02:34:37

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 33);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["id", "diagnosis", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concavePoints_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concavePoints_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst", "perimeter_worst", "area_worst", "smoothness_worst", "compactness_worst", "concavity_worst", "concavePoints_worst", "symmetry_worst", "fractal_dimension_worst", "VarName33"];
opts.VariableTypes = ["double", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "VarName33", "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["diagnosis", "VarName33"], "EmptyFieldRule", "auto");

% Import the data
data = readtable("C:\Users\FURKAN\Desktop\MAtlab makine öğrenmesi çalışma\data.csv", opts);

% Gereksiz kolonları model doğruluğunu bozmaması için çıkardık.
data.VarName33 = [];
data.id = [];
% Clear temporary variables
clear opts
%%
% Veriyi normalize ettik.
dataNorm = normalize(data,'scale',"DataVariables",vartype("numeric"));

%Datamızdaki iyi huylu ve kötü huylu kanser tiplerinin histogramını
%yazdırdık
histogram(dataNorm.diagnosis);

%% En yüksek başarı değerimizi bulmak için algoritmamızı 30 defa çalıştırdık
% ve score değerlerini kaydettik.
score_list = {};
 for c = 1:100
     cv = cvpartition(dataNorm.diagnosis,"HoldOut",0.15);
     %Train ve test verilerini değişkenlerimizin içerisine atadık
     bcTrain = dataNorm(training(cv),:);
     bcTest15_Y = dataNorm(test(cv),:);
     bcTest15_YY = bcTest15_Y.diagnosis;
     tempDtModel = fitctree(bcTrain,"diagnosis");
     tempPredictionDT = predict(tempDtModel,bcTest15_Y);
     tempIscorrectDT = (tempPredictionDT==bcTest15_Y.diagnosis);
     tempAccuracyDT = sum(tempIscorrectDT)/numel(tempIscorrectDT);
     score_list = [score_list,tempAccuracyDT];
 end
 accuarcyDT15 = max(cell2mat(score_list));
%%
% cvpartition ile diagnosis sütununu bağımlı değişken alaran %70'e %30
% olarak böldük
cv = cvpartition(dataNorm.diagnosis,"HoldOut",0.3);
cv15 = cvpartition(dataNorm.diagnosis,"HoldOut",0.15);

%Train ve test verilerini değişkenlerimizin içerisine atadık
bcTrain = dataNorm(training(cv),:);
bcTest = dataNorm(test(cv),:);

bcTrain15 = dataNorm(training(cv15),:);
bcTest15 = dataNorm(test(cv15),:);

head(bcTrain);
head(bcTest);
%%
% Train ve Test datamızda eksik veri olup olmadığını kontrol ettik.
 missingTrain = min(sum(ismissing(bcTrain)));
 missingTest = min(sum(ismissing(bcTest)));

% karar ağacı algoritmamıza uyguladık ve diagnosis sütununu bağımlı değişken
%olarak aldık.
dtModel = fitctree(bcTrain,"diagnosis");
dtModell5 = fitctree(bcTrain15,"diagnosis");

% ROC Curve
[labels, score] = resubPredict(dtModel);
whos score
whos
[X1, Y1] = perfcurve(dtModel.Y,score(:,1),'B');
length(unique(score(:,1)));
[X2, Y2] = perfcurve(dtModel.Y,score(:,2),'M');
length(unique(score(:,2)));
figure
plot(X1,Y1);
hold on
plot(X2,Y2);
title('ROC Curve');
legend({'B','M'},'Location','northeast');


%gerçek verim ile test verimi karşılaştırdım ve tahmin değişkenine atadım
predictionDT = predict(dtModel,bcTest);
predictionDT15 = predict(dtModel15,bcTest15);

% Tahmin verileri ile gerçek verilerin ekrana yazdırılması.
% [predictionDT,bcTest.diagnosis]= ;

% Sonucu analiz etmek adına confusionchart fonksiyonu ile confison
% chart'ımızı yazdırdık.
bcTest_Y = bcTest.diagnosis;
confusionchart(predictionDT,bcTest_Y);


%tahmin edilen diagnosis değerleri ile Test verimizi karşılaştırdım ve
% sonucu iscorrectDT değişkenine atadım.
iscorrectDT = (predictionDT==bcTest.diagnosis);
iscorrectDT15 = (predictionDT15==bcTest15.diagnosis);

%accuarcy değerimi hesapladım
accuracyDT = sum(iscorrectDT)/numel(iscorrectDT);
accuracyDT15 = sum(iscorrectDT15)/numel(iscorrectDT15);

%disp("Hata Payı : " + fault);
%disp("Accuracy Değeri : "+ accuracyDT);
