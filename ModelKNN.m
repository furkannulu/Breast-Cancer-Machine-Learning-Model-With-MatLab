%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\FURKAN\Desktop\MAtlab makine öğrenmesi çalışma\data.csv
%
% Auto-generated by MATLAB on 17-Dec-2022 02:34:37

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 33);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["id", "diagnosis", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concavePoints_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concavePoints_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst", "perimeter_worst", "area_worst", "smoothness_worst", "compactness_worst", "concavity_worst", "concavePoints_worst", "symmetry_worst", "fractal_dimension_worst", "VarName33"];
opts.VariableTypes = ["double", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "VarName33", "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["diagnosis", "VarName33"], "EmptyFieldRule", "auto");

% Import the data
data = readtable("C:\Users\FURKAN\Desktop\MAtlab makine öğrenmesi çalışma\data.csv", opts);

clear opts
% Gereksiz kolonları model doğruluğunu bozmaması için çıkardık.
data.VarName33 = [];
data.id = [];

%Datamızdaki iyi huylu ve kötü huylu kanser tiplerinin histogramını
%yazdırdık
histogram(data.diagnosis);

dataNorm = normalize(data,'scale',"DataVariables",vartype("numeric"));

% Veri setimizdeki diagnosis satırındaki categorif veriyi logic veriye
% çevirdik
%temp = data.diagnosis == 'M';
%logicData = data;
%logicData.diagnosis = temp;

%% En yüksek başarı değerimizi bulmak için algoritmamızı 30 defa çalıştırdık
% ve score değerlerini kaydettik.
score_list = {};
for c = 1:100
    cv30 = cvpartition(dataNorm.diagnosis,"HoldOut",0.3);
    %Train ve test verilerini değişkenlerimizin içerisine atadık
    bcTrain30 = dataNorm(training(cv30),:);
    bcTest30 = dataNorm(test(cv30),:);
    bcTrain30_X = removevars(bcTrain30,{'diagnosis'});
    bcTest30_X = removevars(bcTest30,{'diagnosis'});
    bcTrain30_Y = bcTrain30.diagnosis;
    bcTest30_Y = bcTest30.diagnosis;
    modelKNN30 = fitcknn(bcTrain30_X,bcTrain30_Y,'NumNeighbors',9);
    predictionKNN30 = predict(modelKNN30,bcTest30_X);
    iscorrectKNN30 = (predictionKNN30==bcTest30_Y);
    accuracyKNN30 = sum(iscorrectKNN30)/numel(iscorrectKNN30);
    score_list = [score_list,accuracyKNN30];
end
 a = max(cell2mat(score_list));
%%

%Veri setimizi 70%'e 30% olarak HoldOut metodu ile böldük
cv30 = cvpartition(dataNorm.diagnosis,"HoldOut",0.3);
%Veri setimizi 85%'e 15% olarak HoldOut metodu ile böldük
cv15 = cvpartition(dataNorm.diagnosis,"HoldOut",0.15);

% Train ve Test datalarını değişkenlerine atadık
bcTrain30 = dataNorm(training(cv30),:);
bcTest30 = dataNorm(test(cv30),:);

bcTrain15 = dataNorm(training(cv15),:);
bcTest15 = dataNorm(test(cv15),:);
% Train ve Test datamızın ilk 8 satırını ekrana yazdırdık.
head(bcTrain30);
head(bcTest30);

head(bcTrain15);
head(bcTest15);

% Train ve test datalarımızdaki bağımlı değişken değerimiz olan diagnosis
% sütunlarını sildik ve onları ayrı birer değişkene atadık
bcTrain30_X = removevars(bcTrain30,{'diagnosis'});
bcTest30_X = removevars(bcTest30,{'diagnosis'});

bcTrain30_Y = bcTrain30.diagnosis;
bcTest30_Y = bcTest30.diagnosis;

bcTrain15_X = removevars(bcTrain15,{'diagnosis'});
bcTest15_X = removevars(bcTest15,{'diagnosis'});

bcTrain15_Y = bcTrain15.diagnosis;
bcTest15_Y = bcTest15.diagnosis;
%% En iyi k değerini bulma
 % En iyi k değerini bulmak için bir deneme gerçekleştirdim ve çıkan sonuca
 % göre k değerini 9 almaya karar verdim.
 valueOfK = {};
 for c = 1:15
     tempKNN = fitcknn(bcTrain30_X,bcTrain30_Y,'NumNeighbors',c);
     tempPredictionKNN30 = predict(tempKNN,bcTest30_X);
     tempIscorrectKNN30 = (tempPredictionKNN30==bcTest30_Y);
     tempAccuracyKNN30 = sum(tempIscorrectKNN30)/numel(tempIscorrectKNN30);
     valueOfK = [valueOfK,tempAccuracyKNN30];
 end
%% KNN modelimizi uyguladık.
modelKNN30 = fitcknn(bcTrain30_X,bcTrain30_Y,'NumNeighbors',9);
modelKNN15 = fitcknn(bcTrain15_X,bcTrain15_Y,'NumNeighbors',9);

% ROC Curve
[labels, score] = resubPredict(modelKNN30);
whos score
whos
[X1, Y1] = perfcurve(modelKNN30.Y,score(:,1),'B');
length(unique(score(:,1)));
[X2, Y2] = perfcurve(modelKNN30.Y,score(:,2),'M');
length(unique(score(:,2)));
figure
plot(X1,Y1);
hold on
plot(X2,Y2);
title('ROC Curve');
legend({'B','M'},'Location','northeast');

% Tahmin değerimizi bulduk.
predictionKNN30 = predict(modelKNN30,bcTest30_X);
predictionKNN15 = predict(modelKNN15,bcTest15_X);

%[predictionKNN,bcTest_Y]=
%% Sonuç

% Sonucu analiz etmek adına confusionchart fonksiyonu ile confison
% chart'ımızı yazdırdık.
confusionchart(predictionKNN30,bcTest30_Y);
confusionchart(predictionKNN15,bcTest15_Y);

% Tahmin edilen değerlerin gerçek test verileriyle karşılaştırdık ve ne
% kadar doğru sonuç aldığımızı kaydettik.
iscorrectKNN30 = (predictionKNN30==bcTest30_Y);
iscorrectKNN15 = (predictionKNN15==bcTest15_Y);

% Accuarcy değerimizi hesapladık ve modelimizin yüzde kaç doğruluk oranı
% ile çalıştığını öğrendik
accuracyKNN30 = sum(iscorrectKNN30)/numel(iscorrectKNN30);
accuracyKNN15 = sum(iscorrectKNN15)/numel(iscorrectKNN15);

%disp("Hata Payı : " + fault);
%disp("Accuracy Değeri : "+ accuracyKNN),


